{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/wanga/Desktop/cookie/frontend/src/utils/api.ts"],"sourcesContent":["/**\n * Safely construct API URLs by ensuring no double slashes\n */\nexport function getApiUrl(): string {\n  const baseUrl = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\";\n  // Remove trailing slash if present\n  return baseUrl.replace(/\\/$/, \"\");\n}\n\n/**\n * Construct full API endpoint URL\n */\nexport function getApiEndpoint(path: string): string {\n  const baseUrl = getApiUrl();\n  // Ensure path starts with /\n  const cleanPath = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${baseUrl}${cleanPath}`;\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AAEiB;AADX,SAAS;IACd,MAAM,UAAU,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI;IACnD,mCAAmC;IACnC,OAAO,QAAQ,OAAO,CAAC,OAAO;AAChC;AAKO,SAAS,eAAe,IAAY;IACzC,MAAM,UAAU;IAChB,4BAA4B;IAC5B,MAAM,YAAY,KAAK,UAAU,CAAC,OAAO,OAAO,AAAC,IAAQ,OAAL;IACpD,OAAO,AAAC,GAAY,OAAV,SAAoB,OAAV;AACtB","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///Users/wanga/Desktop/cookie/frontend/src/context/CountdownContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { getApiEndpoint } from \"@/utils/api\";\n\nconst FREEZE_SEC = Number(process.env.NEXT_PUBLIC_FREEZE_SEC || 180);\nconst WINNER_HOLD_MS = Number(process.env.NEXT_PUBLIC_WINNER_HOLD_MS || 15000);\n\ninterface DrawInfo {\n  hasActiveDraw: boolean;\n  round?: number;\n  drawTime?: number; // UNIX seconds: round end\n  freezeTime?: number; // UNIX seconds: end - FREEZE_SEC\n  secondsRemaining?: number;\n  totalEntries?: number;\n  automationEnabled?: boolean;\n  isFrozen?: boolean;\n  isCompleted?: boolean; // optional\n  message?: string;\n  drawNumber?: number; // Added for unified endpoint\n  roundState?: {\n    // Added for unified endpoint\n    isActive: boolean;\n    start: number;\n    end: number;\n    winner: string;\n    winningTokenId: string;\n  } | null;\n}\n\ninterface CountdownContextType {\n  timeLeft: string;\n  loading: boolean;\n  error: string;\n  drawInfo: DrawInfo | null;\n}\n\nconst CountdownContext = createContext<CountdownContextType | undefined>(\n  undefined\n);\n\nexport const CountdownProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [timeLeft, setTimeLeft] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [drawInfo, setDrawInfo] = useState<DrawInfo | null>(null);\n\n  const fetchDrawInfo = async (): Promise<DrawInfo | null> => {\n    try {\n      if (typeof window === \"undefined\") return null;\n      // ✅ NEW: Use unified endpoint for better synchronization\n      const endpoint = getApiEndpoint(\"/api/automation/unified-status\");\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(endpoint, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-store\",\n        signal: controller.signal,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      clearTimeout(timeoutId);\n      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n\n      const json = await res.json();\n      if (!json?.success) throw new Error(json?.error || \"API unsuccessful\");\n\n      // ✅ NEW: Transform unified response to DrawInfo format\n      const unifiedData = json.data;\n      const automation = unifiedData.automation;\n      const roundData = unifiedData.roundData;\n\n      // Convert to DrawInfo format for compatibility\n      const drawInfo: DrawInfo = {\n        drawNumber: unifiedData.drawNumber || 1,\n        hasActiveDraw: automation?.hasActiveDraw || false,\n        drawTime: automation?.drawTime || null,\n        freezeTime: automation?.freezeTime || null,\n        totalEntries: automation?.totalEntries || 0,\n        isCompleted: automation?.isCompleted || false,\n        round: automation?.round || unifiedData.currentRound || 0,\n\n        // Additional automation-specific data\n        automationEnabled: automation?.isEnabled || false,\n        roundState: roundData\n          ? {\n              isActive: roundData.isActive,\n              start: roundData.start,\n              end: roundData.end,\n              winner: roundData.winner,\n              winningTokenId: roundData.winningTokenId,\n            }\n          : null,\n      };\n\n      return drawInfo;\n    } catch (err) {\n      console.error(\"❌ Error fetching unified draw info:\", err);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    let lastFetchTime = 0;\n    let cached: DrawInfo | null = null;\n    let winnerHoldUntil = 0; // hold “Winner chosen!” briefly after completion\n\n    const fetchData = async () => {\n      const d = await fetchDrawInfo();\n      if (!d) {\n        setError(\"Please wait\");\n        setLoading(false);\n        return;\n      }\n      cached = d;\n      setDrawInfo(d);\n      setError(\"\");\n      setLoading(false);\n      lastFetchTime = Date.now();\n\n      if (d.isCompleted) {\n        winnerHoldUntil = Date.now() + WINNER_HOLD_MS;\n      }\n    };\n\n    const fmt = (sec: number) => {\n      const h = Math.floor(sec / 3600);\n      const m = Math.floor((sec % 3600) / 60);\n      const s = sec % 60;\n      return `${String(h).padStart(2, \"0\")}:${String(m).padStart(\n        2,\n        \"0\"\n      )}:${String(s).padStart(2, \"0\")}`;\n    };\n\n    const updateCountdown = () => {\n      if (!cached) {\n        setTimeLeft(\"Loading...\");\n        return;\n      }\n\n      // Keep “Winner chosen!” visible even if next round already started\n      if (winnerHoldUntil > Date.now()) {\n        setTimeLeft(\"Winner chosen!\");\n        return;\n      }\n\n      const now = Math.floor(Date.now() / 1000);\n\n      // No active draw yet\n      if (!cached.hasActiveDraw) {\n        setTimeLeft(\"Round starting\");\n        return;\n      }\n\n      const end = cached.drawTime ?? 0;\n      const freezeAt = cached.freezeTime ?? (end ? end - FREEZE_SEC : 0);\n      const secsToFreeze = Math.max(0, freezeAt > 0 ? freezeAt - now : 0);\n      const secsToEnd = Math.max(0, end > 0 ? end - now : 0);\n\n      // After end → Automation/VRF\n      if (end > 0 && now >= end) {\n        if (cached.isCompleted) {\n          setTimeLeft(\"Winner chosen!\");\n          if (winnerHoldUntil === 0) {\n            winnerHoldUntil = Date.now() + WINNER_HOLD_MS;\n          }\n        } else {\n          setTimeLeft(\"awaiting winner...\");\n        }\n        if (Date.now() - lastFetchTime > 2000) void fetchData();\n        return;\n      }\n\n      // Freeze window\n      if (freezeAt > 0 && now >= freezeAt && now < end) {\n        setTimeLeft(\"drawing...\");\n        return;\n      }\n\n      // Pre-freeze countdown\n      if (end > 0 && now < freezeAt) {\n        setTimeLeft(fmt(secsToFreeze)); // mm:ss\n        return;\n      }\n\n      // Fallback\n      setTimeLeft(secsToEnd > 0 ? fmt(secsToEnd) : \"Round pending\");\n    };\n\n    void fetchData();\n    const dataFetchInterval = setInterval(fetchData, 30_000);\n    const countdownInterval = setInterval(updateCountdown, 1000);\n\n    return () => {\n      clearInterval(dataFetchInterval);\n      clearInterval(countdownInterval);\n    };\n  }, []);\n\n  return (\n    <CountdownContext.Provider value={{ timeLeft, loading, error, drawInfo }}>\n      {children}\n    </CountdownContext.Provider>\n  );\n};\n\nexport const useCountdown = (): CountdownContextType => {\n  const ctx = useContext(CountdownContext);\n  if (!ctx)\n    throw new Error(\"useCountdown must be used within a CountdownProvider\");\n  return ctx;\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}