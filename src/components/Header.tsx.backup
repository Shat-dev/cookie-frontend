"use client";

import Link from "next/link";
import { useEffect, useState } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";

type CurrentPage = "how-to-enter" | "how-it-works" | "faq" | "home";

export default function Header({ currentPage }: { currentPage?: CurrentPage }) {
  const [contractAddress, setContractAddress] = useState<string>("");
  const [copied, setCopied] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const pathname = usePathname();

  // Derive currentPage from router if not provided as prop
  const derivedPage =
    pathname === "/how-it-works"
      ? ("how-it-works" as CurrentPage)
      : pathname === "/faq"
      ? ("faq" as CurrentPage)
      : pathname === "/enter"
      ? ("how-to-enter" as CurrentPage)
      : ("home" as CurrentPage);

  // Normalize currentPage with prop override and defensive comparison
  const page: CurrentPage = currentPage ?? derivedPage;

  useEffect(() => {
    // Import the contract address from the constants file
    import("../../constants/contract-address.json")
      .then((data) => {
        setContractAddress(data.Gacha);
      })
      .catch((error) => {
        console.error("Failed to load contract address:", error);
        setContractAddress("0x0000...0000"); // Fallback
      });
  }, []);

  const handleCopyAddress = async () => {
    try {
      await navigator.clipboard.writeText(contractAddress);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Failed to copy address:", err);
    }
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  // Close menu when clicking outside (optional enhancement)
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        isMenuOpen &&
        !(event.target as Element).closest(".mobile-menu-container")
      ) {
        setIsMenuOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isMenuOpen]);

  return (
    <header className="px-4 md:px-8 py-6 relative">
      {/* Top Left */}
      <div className="absolute left-2 md:left-4 top-6 text-lg md:text-lg text-sm font-thin">
        <div className="text-[#666666] mb-1 hover:text-[#212427] transition-colors text-xs md:text-lg">
          <span className="md:hidden">ERC-404 Lottery</span>
          <span className="hidden md:inline">ERC-404 Powered Lottery</span>
        </div>
        <div
          className="text-[#666666] font-thin hover:text-[#212427] transition-colors cursor-pointer text-xs md:text-base font-mono"
          onClick={handleCopyAddress}
        >
          {/* Mobile: 3 lines */}
          <div className="flex flex-col md:hidden space-y-1">
            <div className="transition-all duration-300 ease-in-out flex items-center gap-1">
              {copied ? (
                <>Copied Successfully!</>
              ) : (
                contractAddress.slice(0, 14)
              )}
            </div>
            <div className="transition-all duration-300 ease-in-out">
              {copied ? "" : contractAddress.slice(14, 28)}
            </div>
            <div className="transition-all duration-300 ease-in-out">
              {copied ? "" : contractAddress.slice(28, 42)}
            </div>
          </div>

          {/* Desktop: 2 lines */}
          <div className="hidden md:flex flex-col">
            <div className="transition-all duration-300 ease-in-out flex items-center gap-1">
              {copied ? (
                <>Copied Successfully!</>
              ) : (
                contractAddress.slice(0, 21)
              )}
            </div>
            <div className="transition-all duration-300 ease-in-out">
              {copied ? "" : contractAddress.slice(21, 42)}
            </div>
          </div>
        </div>
      </div>

      {/* Top Center */}
      <div className="text-center">
        <Link href="/" className="block">
          <div className="text-sm ml-2 md:text-lg md:ml-0 font-bold text-[#666666] hover:text-[#212427] hover:underline transition-colors font-thin cursor-pointer">
            Playgacha.xyz
          </div>
        </Link>
      </div>

      {/* Mobile Hamburger Menu */}
      <div className="md:hidden absolute -right-1 top-4 mobile-menu-container">
        <button
          onClick={toggleMenu}
          className="p-2 hover:bg-gray-100 rounded-md transition-colors"
          aria-label="Toggle menu"
        >
          <Image
            src="/hamburger-menu.svg"
            alt="Menu"
            width={30}
            height={30}
            className="opacity-70 hover:opacity-100 transition-opacity"
          />
        </button>

        {/* Mobile Dropdown Menu */}
        {isMenuOpen && (
          <div className="absolute right-3 top-8.5 space-y-0.25 text-right text-[#666666] font-thin z-50 transform transition-all duration-200 ease-in-out min-w-[120px]">
            <Link
              href="https://x.com/PlayGachaXYZ"
              target="_blank"
              rel="noopener noreferrer"
              className="block text-[#666666] hover:text-[#212427] hover:underline transition-colors text-xs"
              onClick={() => setIsMenuOpen(false)}
            >
              Twitter
            </Link>

            <Link
              href={`https://basescan.org/address/${contractAddress}`}
              target="_blank"
              rel="noopener noreferrer"
              className="block text-[#666666] hover:text-[#212427] hover:underline transition-colors text-xs"
              onClick={() => setIsMenuOpen(false)}
            >
              Contract
            </Link>

            <Link
              href={`https://dexscreener.com/base/${contractAddress}`}
              target="_blank"
              rel="noopener noreferrer"
              className="block text-[#666666] hover:text-[#212427] hover:underline transition-colors text-xs"
              onClick={() => setIsMenuOpen(false)}
            >
              Dexscreener
            </Link>

            {page !== "how-it-works" && (
              <Link
                href="/how-it-works"
                className="block hover:text-[#212427] hover:underline transition-colors text-xs text-[#666666]"
                onClick={() => setIsMenuOpen(false)}
              >
                How it works
              </Link>
            )}

            {page !== "faq" && (
              <Link
                href="/faq"
                className="block text-[#666666] font-thin hover:text-[#212427] hover:underline transition-colors text-xs"
                onClick={() => setIsMenuOpen(false)}
              >
                FAQ
              </Link>
            )}
          </div>
        )}
      </div>

      {/* Desktop Top Right Navigation */}
      <div className="hidden md:block absolute right-2 md:right-4 top-6 text-sm md:text-lg space-y-0.25 md:space-y-1 text-right text-[#666666] font-thin">
        <Link
          href="https://x.com/PlayGachaXYZ"
          target="_blank"
          rel="noopener noreferrer"
          className="block hover:text-[#212427] hover:underline transition-colors text-xs md:text-base"
        >
          Twitter
        </Link>
        <Link
          href={`https://basescan.org/address/${contractAddress}`}
          target="_blank"
          rel="noopener noreferrer"
          className="block hover:text-[#212427] hover:underline transition-colors text-xs md:text-base"
        >
          Contract
        </Link>
        <Link
          href={`https://dexscreener.com/base/${contractAddress}`}
          target="_blank"
          rel="noopener noreferrer"
          className="block hover:text-[#212427] hover:underline transition-colors text-xs md:text-base"
        >
          Dexscreener
        </Link>
        <Link
          href="/how-it-works"
          className={`block hover:text-[#212427] hover:underline transition-colors text-xs md:text-base ${
            page === "how-it-works" ? "text-black" : ""
          }`}
        >
          How it works
        </Link>
        <Link
          href="/faq"
          className="text-xs md:text-lg text-[#666666] font-thin hover:text-[#212427] transition-colors hover:underline"
        >
          FAQ
        </Link>
      </div>
    </header>
  );
}
